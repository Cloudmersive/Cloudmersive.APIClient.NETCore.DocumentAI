/* 
 * Document AI API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAI.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAI.Model
{
    /// <summary>
    /// PolicyRule
    /// </summary>
    [DataContract]
    public partial class PolicyRule :  IEquatable<PolicyRule>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyRule" /> class.
        /// </summary>
        /// <param name="ruleId">ruleId.</param>
        /// <param name="ruleType">Possible values are ALLOW and DENY.</param>
        /// <param name="ruleDescription">Description of the rule in natural language, e.g. Do not allow documents that contain offensive language.</param>
        public PolicyRule(string ruleId = default(string), string ruleType = default(string), string ruleDescription = default(string))
        {
            this.RuleId = ruleId;
            this.RuleType = ruleType;
            this.RuleDescription = ruleDescription;
        }
        
        /// <summary>
        /// Gets or Sets RuleId
        /// </summary>
        [DataMember(Name="RuleId", EmitDefaultValue=false)]
        public string RuleId { get; set; }

        /// <summary>
        /// Possible values are ALLOW and DENY
        /// </summary>
        /// <value>Possible values are ALLOW and DENY</value>
        [DataMember(Name="RuleType", EmitDefaultValue=false)]
        public string RuleType { get; set; }

        /// <summary>
        /// Description of the rule in natural language, e.g. Do not allow documents that contain offensive language
        /// </summary>
        /// <value>Description of the rule in natural language, e.g. Do not allow documents that contain offensive language</value>
        [DataMember(Name="RuleDescription", EmitDefaultValue=false)]
        public string RuleDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyRule {\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  RuleType: ").Append(RuleType).Append("\n");
            sb.Append("  RuleDescription: ").Append(RuleDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyRule);
        }

        /// <summary>
        /// Returns true if PolicyRule instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyRule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.RuleType == input.RuleType ||
                    (this.RuleType != null &&
                    this.RuleType.Equals(input.RuleType))
                ) && 
                (
                    this.RuleDescription == input.RuleDescription ||
                    (this.RuleDescription != null &&
                    this.RuleDescription.Equals(input.RuleDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleId != null)
                    hashCode = hashCode * 59 + this.RuleId.GetHashCode();
                if (this.RuleType != null)
                    hashCode = hashCode * 59 + this.RuleType.GetHashCode();
                if (this.RuleDescription != null)
                    hashCode = hashCode * 59 + this.RuleDescription.GetHashCode();
                return hashCode;
            }
        }
    }

}
