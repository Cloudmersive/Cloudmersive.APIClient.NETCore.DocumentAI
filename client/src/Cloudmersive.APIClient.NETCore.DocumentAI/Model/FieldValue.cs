/* 
 * Document AI API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAI.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAI.Model
{
    /// <summary>
    /// Field value result of extracting fields from a document
    /// </summary>
    [DataContract]
    public partial class FieldValue :  IEquatable<FieldValue>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldValue" /> class.
        /// </summary>
        /// <param name="fieldName">Name of the field (note that spaces will be replaced with underscore).</param>
        /// <param name="fieldStringValue">String value of the field that was extractged from the document.</param>
        public FieldValue(string fieldName = default(string), string fieldStringValue = default(string))
        {
            this.FieldName = fieldName;
            this.FieldStringValue = fieldStringValue;
        }
        
        /// <summary>
        /// Name of the field (note that spaces will be replaced with underscore)
        /// </summary>
        /// <value>Name of the field (note that spaces will be replaced with underscore)</value>
        [DataMember(Name="FieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }

        /// <summary>
        /// String value of the field that was extractged from the document
        /// </summary>
        /// <value>String value of the field that was extractged from the document</value>
        [DataMember(Name="FieldStringValue", EmitDefaultValue=false)]
        public string FieldStringValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldValue {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FieldStringValue: ").Append(FieldStringValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldValue);
        }

        /// <summary>
        /// Returns true if FieldValue instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.FieldStringValue == input.FieldStringValue ||
                    (this.FieldStringValue != null &&
                    this.FieldStringValue.Equals(input.FieldStringValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.FieldStringValue != null)
                    hashCode = hashCode * 59 + this.FieldStringValue.GetHashCode();
                return hashCode;
            }
        }
    }

}
