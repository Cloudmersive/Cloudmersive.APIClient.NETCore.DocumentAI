/* 
 * Document AI API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAI.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAI.Model
{
    /// <summary>
    /// Instances of a policy rule violation
    /// </summary>
    [DataContract]
    public partial class PolicyRuleViolation :  IEquatable<PolicyRuleViolation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyRuleViolation" /> class.
        /// </summary>
        /// <param name="ruleId">ID of the rule; if no ID was supplied, the ID is the 1-based index of the rule.</param>
        /// <param name="ruleViolationRiskScore">Risk score between 0.0 and 1.0 where values above 0.5 are increasing levels of risk.</param>
        /// <param name="ruleViolationRationale">AI natural language rationale for why this policy was violated.</param>
        public PolicyRuleViolation(string ruleId = default(string), double? ruleViolationRiskScore = default(double?), string ruleViolationRationale = default(string))
        {
            this.RuleId = ruleId;
            this.RuleViolationRiskScore = ruleViolationRiskScore;
            this.RuleViolationRationale = ruleViolationRationale;
        }
        
        /// <summary>
        /// ID of the rule; if no ID was supplied, the ID is the 1-based index of the rule
        /// </summary>
        /// <value>ID of the rule; if no ID was supplied, the ID is the 1-based index of the rule</value>
        [DataMember(Name="RuleId", EmitDefaultValue=false)]
        public string RuleId { get; set; }

        /// <summary>
        /// Risk score between 0.0 and 1.0 where values above 0.5 are increasing levels of risk
        /// </summary>
        /// <value>Risk score between 0.0 and 1.0 where values above 0.5 are increasing levels of risk</value>
        [DataMember(Name="RuleViolationRiskScore", EmitDefaultValue=false)]
        public double? RuleViolationRiskScore { get; set; }

        /// <summary>
        /// AI natural language rationale for why this policy was violated
        /// </summary>
        /// <value>AI natural language rationale for why this policy was violated</value>
        [DataMember(Name="RuleViolationRationale", EmitDefaultValue=false)]
        public string RuleViolationRationale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyRuleViolation {\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  RuleViolationRiskScore: ").Append(RuleViolationRiskScore).Append("\n");
            sb.Append("  RuleViolationRationale: ").Append(RuleViolationRationale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyRuleViolation);
        }

        /// <summary>
        /// Returns true if PolicyRuleViolation instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyRuleViolation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyRuleViolation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.RuleViolationRiskScore == input.RuleViolationRiskScore ||
                    (this.RuleViolationRiskScore != null &&
                    this.RuleViolationRiskScore.Equals(input.RuleViolationRiskScore))
                ) && 
                (
                    this.RuleViolationRationale == input.RuleViolationRationale ||
                    (this.RuleViolationRationale != null &&
                    this.RuleViolationRationale.Equals(input.RuleViolationRationale))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleId != null)
                    hashCode = hashCode * 59 + this.RuleId.GetHashCode();
                if (this.RuleViolationRiskScore != null)
                    hashCode = hashCode * 59 + this.RuleViolationRiskScore.GetHashCode();
                if (this.RuleViolationRationale != null)
                    hashCode = hashCode * 59 + this.RuleViolationRationale.GetHashCode();
                return hashCode;
            }
        }
    }

}
