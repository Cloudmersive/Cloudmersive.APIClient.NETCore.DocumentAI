/* 
 * Document AI API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAI.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAI.Model
{
    /// <summary>
    /// Field to extract from a document using AI
    /// </summary>
    [DataContract]
    public partial class FieldToExtract :  IEquatable<FieldToExtract>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldToExtract" /> class.
        /// </summary>
        /// <param name="fieldName">Name of the field to extract.</param>
        /// <param name="fieldOptional">Optional: True if the field is optional, false if required (default).</param>
        /// <param name="fieldDescription">Optional but recommended: Description of the field - use this to describe what the field is, how it is formatted, what is unique about it, etc..</param>
        /// <param name="fieldExample">Optional: Example label or value of the field.</param>
        public FieldToExtract(string fieldName = default(string), bool? fieldOptional = default(bool?), string fieldDescription = default(string), string fieldExample = default(string))
        {
            this.FieldName = fieldName;
            this.FieldOptional = fieldOptional;
            this.FieldDescription = fieldDescription;
            this.FieldExample = fieldExample;
        }
        
        /// <summary>
        /// Name of the field to extract
        /// </summary>
        /// <value>Name of the field to extract</value>
        [DataMember(Name="FieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }

        /// <summary>
        /// Optional: True if the field is optional, false if required (default)
        /// </summary>
        /// <value>Optional: True if the field is optional, false if required (default)</value>
        [DataMember(Name="FieldOptional", EmitDefaultValue=false)]
        public bool? FieldOptional { get; set; }

        /// <summary>
        /// Optional but recommended: Description of the field - use this to describe what the field is, how it is formatted, what is unique about it, etc.
        /// </summary>
        /// <value>Optional but recommended: Description of the field - use this to describe what the field is, how it is formatted, what is unique about it, etc.</value>
        [DataMember(Name="FieldDescription", EmitDefaultValue=false)]
        public string FieldDescription { get; set; }

        /// <summary>
        /// Optional: Example label or value of the field
        /// </summary>
        /// <value>Optional: Example label or value of the field</value>
        [DataMember(Name="FieldExample", EmitDefaultValue=false)]
        public string FieldExample { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldToExtract {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FieldOptional: ").Append(FieldOptional).Append("\n");
            sb.Append("  FieldDescription: ").Append(FieldDescription).Append("\n");
            sb.Append("  FieldExample: ").Append(FieldExample).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldToExtract);
        }

        /// <summary>
        /// Returns true if FieldToExtract instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldToExtract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldToExtract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.FieldOptional == input.FieldOptional ||
                    (this.FieldOptional != null &&
                    this.FieldOptional.Equals(input.FieldOptional))
                ) && 
                (
                    this.FieldDescription == input.FieldDescription ||
                    (this.FieldDescription != null &&
                    this.FieldDescription.Equals(input.FieldDescription))
                ) && 
                (
                    this.FieldExample == input.FieldExample ||
                    (this.FieldExample != null &&
                    this.FieldExample.Equals(input.FieldExample))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.FieldOptional != null)
                    hashCode = hashCode * 59 + this.FieldOptional.GetHashCode();
                if (this.FieldDescription != null)
                    hashCode = hashCode * 59 + this.FieldDescription.GetHashCode();
                if (this.FieldExample != null)
                    hashCode = hashCode * 59 + this.FieldExample.GetHashCode();
                return hashCode;
            }
        }
    }

}
