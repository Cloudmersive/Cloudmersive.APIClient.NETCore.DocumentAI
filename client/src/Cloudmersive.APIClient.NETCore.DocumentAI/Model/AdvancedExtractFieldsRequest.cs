/* 
 * Document AI API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAI.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAI.Model
{
    /// <summary>
    /// Request to perform an AI field extraction on a document
    /// </summary>
    [DataContract]
    public partial class AdvancedExtractFieldsRequest :  IEquatable<AdvancedExtractFieldsRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedExtractFieldsRequest" /> class.
        /// </summary>
        /// <param name="inputFile">Input document file to perform the operation on as a byte array.</param>
        /// <param name="fieldsToExtract">Fields to extract from the document.</param>
        public AdvancedExtractFieldsRequest(byte[] inputFile = default(byte[]), List<FieldToExtract> fieldsToExtract = default(List<FieldToExtract>))
        {
            this.InputFile = inputFile;
            this.FieldsToExtract = fieldsToExtract;
        }
        
        /// <summary>
        /// Input document file to perform the operation on as a byte array
        /// </summary>
        /// <value>Input document file to perform the operation on as a byte array</value>
        [DataMember(Name="InputFile", EmitDefaultValue=false)]
        public byte[] InputFile { get; set; }

        /// <summary>
        /// Fields to extract from the document
        /// </summary>
        /// <value>Fields to extract from the document</value>
        [DataMember(Name="FieldsToExtract", EmitDefaultValue=false)]
        public List<FieldToExtract> FieldsToExtract { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdvancedExtractFieldsRequest {\n");
            sb.Append("  InputFile: ").Append(InputFile).Append("\n");
            sb.Append("  FieldsToExtract: ").Append(FieldsToExtract).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdvancedExtractFieldsRequest);
        }

        /// <summary>
        /// Returns true if AdvancedExtractFieldsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AdvancedExtractFieldsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdvancedExtractFieldsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputFile == input.InputFile ||
                    (this.InputFile != null &&
                    this.InputFile.Equals(input.InputFile))
                ) && 
                (
                    this.FieldsToExtract == input.FieldsToExtract ||
                    this.FieldsToExtract != null &&
                    this.FieldsToExtract.SequenceEqual(input.FieldsToExtract)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputFile != null)
                    hashCode = hashCode * 59 + this.InputFile.GetHashCode();
                if (this.FieldsToExtract != null)
                    hashCode = hashCode * 59 + this.FieldsToExtract.GetHashCode();
                return hashCode;
            }
        }
    }

}
