/* 
 * Document AI API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAI.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAI.Model
{
    /// <summary>
    /// Result of performing a document policy enforcement operation
    /// </summary>
    [DataContract]
    public partial class DocumentPolicyResult :  IEquatable<DocumentPolicyResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentPolicyResult" /> class.
        /// </summary>
        /// <param name="cleanResult">True if the document complies with all of the policies, and false if it does not.</param>
        /// <param name="riskScore">Risk score between 0.0 and 1.0 where values above 0.5 are increasing levels of risk.</param>
        /// <param name="ruleViolations">Policy violations.</param>
        public DocumentPolicyResult(bool? cleanResult = default(bool?), double? riskScore = default(double?), List<PolicyRuleViolation> ruleViolations = default(List<PolicyRuleViolation>))
        {
            this.CleanResult = cleanResult;
            this.RiskScore = riskScore;
            this.RuleViolations = ruleViolations;
        }
        
        /// <summary>
        /// True if the document complies with all of the policies, and false if it does not
        /// </summary>
        /// <value>True if the document complies with all of the policies, and false if it does not</value>
        [DataMember(Name="CleanResult", EmitDefaultValue=false)]
        public bool? CleanResult { get; set; }

        /// <summary>
        /// Risk score between 0.0 and 1.0 where values above 0.5 are increasing levels of risk
        /// </summary>
        /// <value>Risk score between 0.0 and 1.0 where values above 0.5 are increasing levels of risk</value>
        [DataMember(Name="RiskScore", EmitDefaultValue=false)]
        public double? RiskScore { get; set; }

        /// <summary>
        /// Policy violations
        /// </summary>
        /// <value>Policy violations</value>
        [DataMember(Name="RuleViolations", EmitDefaultValue=false)]
        public List<PolicyRuleViolation> RuleViolations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentPolicyResult {\n");
            sb.Append("  CleanResult: ").Append(CleanResult).Append("\n");
            sb.Append("  RiskScore: ").Append(RiskScore).Append("\n");
            sb.Append("  RuleViolations: ").Append(RuleViolations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentPolicyResult);
        }

        /// <summary>
        /// Returns true if DocumentPolicyResult instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentPolicyResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentPolicyResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CleanResult == input.CleanResult ||
                    (this.CleanResult != null &&
                    this.CleanResult.Equals(input.CleanResult))
                ) && 
                (
                    this.RiskScore == input.RiskScore ||
                    (this.RiskScore != null &&
                    this.RiskScore.Equals(input.RiskScore))
                ) && 
                (
                    this.RuleViolations == input.RuleViolations ||
                    this.RuleViolations != null &&
                    this.RuleViolations.SequenceEqual(input.RuleViolations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CleanResult != null)
                    hashCode = hashCode * 59 + this.CleanResult.GetHashCode();
                if (this.RiskScore != null)
                    hashCode = hashCode * 59 + this.RiskScore.GetHashCode();
                if (this.RuleViolations != null)
                    hashCode = hashCode * 59 + this.RuleViolations.GetHashCode();
                return hashCode;
            }
        }
    }

}
