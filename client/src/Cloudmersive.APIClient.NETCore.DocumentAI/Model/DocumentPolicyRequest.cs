/* 
 * Document AI API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAI.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAI.Model
{
    /// <summary>
    /// Request to analyze a document
    /// </summary>
    [DataContract]
    public partial class DocumentPolicyRequest :  IEquatable<DocumentPolicyRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentPolicyRequest" /> class.
        /// </summary>
        /// <param name="inputFile">Input file as a byte array.</param>
        /// <param name="rules">Rules to apply to the document.</param>
        public DocumentPolicyRequest(byte[] inputFile = default(byte[]), List<PolicyRule> rules = default(List<PolicyRule>))
        {
            this.InputFile = inputFile;
            this.Rules = rules;
        }
        
        /// <summary>
        /// Input file as a byte array
        /// </summary>
        /// <value>Input file as a byte array</value>
        [DataMember(Name="InputFile", EmitDefaultValue=false)]
        public byte[] InputFile { get; set; }

        /// <summary>
        /// Rules to apply to the document
        /// </summary>
        /// <value>Rules to apply to the document</value>
        [DataMember(Name="Rules", EmitDefaultValue=false)]
        public List<PolicyRule> Rules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentPolicyRequest {\n");
            sb.Append("  InputFile: ").Append(InputFile).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentPolicyRequest);
        }

        /// <summary>
        /// Returns true if DocumentPolicyRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentPolicyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentPolicyRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputFile == input.InputFile ||
                    (this.InputFile != null &&
                    this.InputFile.Equals(input.InputFile))
                ) && 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputFile != null)
                    hashCode = hashCode * 59 + this.InputFile.GetHashCode();
                if (this.Rules != null)
                    hashCode = hashCode * 59 + this.Rules.GetHashCode();
                return hashCode;
            }
        }
    }

}
